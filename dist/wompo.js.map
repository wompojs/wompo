{
  "version": 3,
  "sources": ["../ts/wompo.ts"],
  "sourcesContent": ["/**\n * False to get smallest build file possible.\n */\nconst DEV_MODE = false;\n\n/* \n================================================\nTYPES\n================================================\n*/\n/**\n * The html`` template function result type.\n */\nexport interface RenderHtml {\n\tparts: TemplateStringsArray;\n\tvalues: any[];\n\t_$wompoHtml: true;\n}\n\n/**\n * The props of any component.\n */\nexport interface WompoProps {\n\t/** The children of the component instance */\n\tchildren?: WompoChildren;\n\t/** The styles generated from the CSS provided */\n\tstyles?: { [key: string]: string };\n\t/** In DEV_MODE, will write on the console performance informations. */\n\t['wc-perf']?: boolean;\n\twcPerf?: boolean;\n\t/** The style of a component to customize it through the style attribute in the DOM. */\n\tstyle?: string | Partial<CSSStyleDeclaration> | object;\n\t/** A potential reference to the element. */\n\tref?: RefHook<any>;\n\t/** The ID of the element */\n\tid?: string;\n\t/** The classes of the element */\n\tclass?: string;\n\t/** JSX events */\n\t[event: `on${string}`]: (ev: Event) => void;\n}\n\n/**\n * The options that a component can have when instantiating.\n * The current available options are:\n * - `name` (string)\n * - `shadow` (boolean)\n * - `cssModule` (boolean)\n */\nexport interface WompoComponentOptions {\n\t/**\n\t * Default value: `null`.\n\t * The component name. If not defined, the component name will be the name of the function in\n\t * hyphen-case. If the component doesn't have an hyphen, a \"wompo\" string will be placed as a\n\t * suffix.\n\t * E.g. TabPanel = tab-panel, Counter = counter-wompo\n\t */\n\tname?: string;\n\t/**\n\t * Default value: `false`. If true, the component will be rendered in a shadow DOM.\n\t */\n\tshadow?: boolean;\n\t/**\n\t * Default value: `true`. If true, the CSS of the component will be replaced with a more unique\n\t * CSS. This is done by simply putting the component name as a prefix in every class.\n\t * The generated class names will be put in the [styles] prop of the component.\n\t * This is done to avoid styles collisions.\n\t * E.g. CounterComponent.css = `.button` => .counter-component__button\n\t */\n\tcssModule?: boolean;\n}\n\n/**\n * The type of the function to create a Wompo Component.\n * It can have a custom `css` property, corresponding to the specific styles of the component.\n */\nexport interface WompoComponent<Props extends WompoProps = WompoProps> {\n\t/** The props of the component */\n\t(props: Props): RenderHtml;\n\t/**\n\t * The specific styles of the component.\n\t */\n\tcss?: string;\n\t/** The component name, elaborated in the defineWompo function */\n\tcomponentName?: string;\n\t/** Identifies the component */\n\t_$wompoF?: true;\n\t/** The generated class of the component */\n\tclass?: WompoElementClass<Props>;\n\t/** Options */\n\toptions?: {\n\t\tgeneratedCSS: string;\n\t\tstyles: { [key: string]: string };\n\t\tshadow: boolean;\n\t};\n}\n\n/**\n * The type of a Wompo component Instance.\n * The public accessible properties are:\n * - `hooks`: Hook[]\n * - `props`: WompoProps\n *\n * The public accessible methods are:\n * - `requestRender()`\n * - `onDisconnected()`\n * - `updateProp(prop, newValue)`\n */\nexport type WompoElement<Props extends WompoProps = WompoProps, E = {}> = HTMLElement &\n\tE & {\n\t\t/**\n\t\t * The props of the component, that are then passed in the function.\n\t\t */\n\t\tprops: Props;\n\n\t\t/**\n\t\t * The hooks of the component. They are accessed by the position in the array.\n\t\t */\n\t\thooks: Hook[];\n\n\t\t/**\n\t\t * The initial props of a component. This property is only used internally when\n\t\t * using a dyanmic tag.\n\t\t */\n\t\t_$initialProps: WompoProps;\n\n\t\t/**\n\t\t * True if the component wants to log the rendering time in the console. Only\n\t\t * available in DEV_MODE.\n\t\t * This property is set to true only when a component has the attribute or\n\t\t * initial prop [wc-perf].\n\t\t */\n\t\t_$measurePerf: boolean;\n\n\t\t/**\n\t\t * True if the component uses a context.\n\t\t */\n\t\t_$usesContext: boolean;\n\n\t\t/**\n\t\t * True if the component has recently been moved. Used to know if a component should search\n\t\t * again for parent contexts.\n\t\t */\n\t\t_$hasBeenMoved: boolean;\n\n\t\t/**\n\t\t * A list of layout effects to execute immediately after the component has been rendered (not\n\t\t * asynchronously).\n\t\t */\n\t\t_$layoutEffects: EffectHook[];\n\n\t\t/**\n\t\t * Requests a render to the component.\n\t\t * @returns void\n\t\t */\n\t\trequestRender: () => void;\n\n\t\t/**\n\t\t * A callback that gets executed whenever the component id disconnected\n\t\t * **definitely** from the DOM. This callback is not called when the\n\t\t * component is just moved from one node to another.\n\t\t * @returns void\n\t\t */\n\t\tonDisconnected: () => void;\n\n\t\t/**\n\t\t * Update a [prop] of the component with the [newValue]. It automatically\n\t\t * re-render the component if the old value and the new value differs.\n\t\t * @param prop The prop name to update\n\t\t * @param newValue The new value to put in the prop\n\t\t * @returns void\n\t\t */\n\t\tupdateProp: (prop: string, newValue: any) => void;\n\n\t\t/**\n\t\t * An identifier to rapidly know if a node is a wompo component.\n\t\t */\n\t\t_$wompo: true;\n\t};\n\n/** The possible hooks that a component can have. */\ntype Hook =\n\t| StateHook<any>\n\t| EffectHook\n\t| RefHook<any>\n\t| CallbackHook\n\t| IdHook\n\t| MemoHook\n\t| ReducerHook<any>\n\t| AsyncHook<any>\n\t| ContextHook;\n\n/** The hook generated by the useState function */\ntype StateHook<S> = [S, (newValue: S | ((oldValue: S) => S)) => void];\n\n/** The hook generated by the useEffect and useLayoutEffect functions */\ninterface EffectHook {\n\tdependencies: any;\n\tcallback: VoidFunction | (() => VoidFunction);\n\tcleanupFunction: VoidFunction | void;\n}\n\n/** The hook generated by the useRef function */\ninterface RefHook<V> {\n\tcurrent: V;\n\t__wcRef: true;\n}\n\n/** The hook generated by the useCallback function */\ninterface CallbackHook {\n\tdependencies?: any[];\n\tvalue: (...args: any[]) => any;\n}\n\n/** The hook generated by the useId function */\ntype IdHook = string;\n\n/** The hook generated by the useMemo function */\ninterface MemoHook {\n\tdependencies: any[];\n\tvalue: any;\n}\n\ninterface ReducerAction {\n\t[key: string]: any;\n}\n/** The hook generated by the useState function */\ntype ReducerHook<State> = [State, (action: ReducerAction) => void];\n\n/** The hook generated by the useAsync function */\ninterface AsyncHook<S> {\n\tdependencies: any[];\n\tvalue: S;\n}\n\n/** The props type of a ContextProvider */\ninterface ContextProviderProps extends WompoProps {\n\tvalue: any;\n}\n/** The exposed values of a ContextProvider */\ninterface ContextProviderExposed {\n\tsubscribers: RefHook<Set<WompoElement>>;\n}\n/** The type of a ContextProvier instance */\ntype ContextInstance = WompoElement<ContextProviderProps, ContextProviderExposed>;\n\n/** The hook generated by the useContext hook */\ninterface ContextHook {\n\tnode: ContextInstance;\n}\n\n/**\n * The type of the class generated by the wompo() function.\n */\ninterface WompoElementClass<Props extends WompoProps, E = {}> {\n\t/** The constructor */\n\tnew (): WompoElement<Props, E>;\n\t/** The cached template data. This is generated only the first time a component renders. */\n\t_$cachedTemplate: CachedTemplate;\n\t/** This function will get or create a new CachedTemplate instance. */\n\t_$getOrCreateTemplate(parts: TemplateStringsArray): CachedTemplate;\n}\n\n/**\n * Each CachedTemplate will generate an array of Dependencies that are metadata to efficientluy\n * update the elements.\n */\ninterface Dependency {\n\t/** The type of the dependency (ATTRIBUTE, NODE, TAG) */\n\ttype: number;\n\t/** The index of the element when walked with the treeWalker */\n\tindex: number;\n\t/** This option is valorized if the type is ATTRIBUTE */\n\tname?: string;\n\t/**\n\t * This option is valorized if the type is ATTRIBUTE and it's a composed attribute.\n\t * (e.g. class=\"button ${'button-primary'}\")\n\t */\n\tattrDynamics?: string;\n}\n\n/**\n * The possible dynamic values: DynamicNode | DynamicAttribute | DynamicTag.\n */\ntype Dynamics = DynamicNode | DynamicAttribute | DynamicTag;\n\n/* \n================================================\nVARIABLES\n================================================\n*/\n/**\n * The current rendering component instance. This is used when creating hooks.\n * This variable is exposed only in the `useHook` hook.\n */\nlet currentRenderingComponent: WompoElement = null;\n/**\n * The current hook index in a component. This is used when creating hooks.\n * This variable is exposed only in the `useHook` hook.\n */\nlet currentHookIndex: number = 0;\n\nconst WC_MARKER = '$wc$';\nconst DYNAMIC_TAG_MARKER = 'wc-wc';\nconst isDynamicTagRegex = /<\\/?$/g;\nconst isAttrRegex = /\\s+([^\\s]*?)=\"?$/g;\nconst selfClosingRegex = /(<([a-z]*-[a-z]*).*?)\\/?>/gs;\nconst isInsideTextTag = /<(?<tag>script|style|textarea|title])(?!.*?<\\/\\k<tag>)/gi;\nconst onlyTextChildrenElementsRegex = /^(?:script|style|textarea|title)$/i;\n\nconst NODE = 0; // Is a NODE Dependency.\nconst ATTR = 1; // Is an ATTRIBUTE Dependency.\nconst TAG = 2; // Is a TAG Dependency.\n\nconst IS_SERVER = typeof global !== 'undefined';\n\nconst doc = IS_SERVER ? ({ createTreeWalker() {} } as unknown as Document) : document;\n\nconst treeWalker = doc.createTreeWalker(\n\tdoc,\n\t129 // NodeFilter.SHOW_{ELEMENT|COMMENT}\n);\n\nconst mutationAttributesExclusions = ['class', 'style', 'id'];\n\n/* \n================================================\nCLASSES\n================================================\n*/\n/**\n * The CachedTemplate class is used to efficiently render components. The template HTML element is\n * stored here and only cloned when a new component is instantiated.\n */\nclass CachedTemplate {\n\t/**\n\t * The HTML Template element that has all the structure and comments built in to identify dynamic\n\t * elements.\n\t */\n\tpublic template: HTMLTemplateElement;\n\t/**\n\t * The list of metadata dependencies used to know which node/attribute should listen to updates\n\t * when a variable changes.\n\t */\n\tpublic dependencies: Dependency[];\n\n\t/**\n\t * Create a new CachedTemplate instance.\n\t * @param template The HTML Template already elaborated to handle the dynamic parts.\n\t * @param dependencies The metadata dependencies for the template.\n\t */\n\tconstructor(template: HTMLTemplateElement, dependencies: Dependency[]) {\n\t\tthis.template = template;\n\t\tthis.dependencies = dependencies;\n\t}\n\n\t/**\n\t * This function will clone the template content and build the dynamcis metadata - an array\n\t * containing all the information to efficiently put values in the DOM, without checking if each\n\t * node is equal to a virtual one. The DOM update is not done through this function, but thanks to\n\t * the `__setValues` function.\n\t * @returns An array containing 2 values: The DOM fragment cloned from the content of the\n\t * template, and the dynamics metadata.\n\t */\n\tpublic clone(): [DocumentFragment, Dynamics[]] {\n\t\tconst content = this.template.content;\n\t\tconst dependencies = this.dependencies;\n\t\tconst fragment = document.importNode(content, true);\n\t\ttreeWalker.currentNode = fragment;\n\t\tlet node = treeWalker.nextNode();\n\t\tlet nodeIndex = 0;\n\t\tlet dynamicIndex = 0;\n\t\tlet templateDependency = dependencies[0];\n\t\tconst dynamics = [];\n\t\twhile (templateDependency !== undefined) {\n\t\t\tif (nodeIndex === templateDependency.index) {\n\t\t\t\tlet dynamic: Dynamics;\n\t\t\t\tconst type = templateDependency.type;\n\t\t\t\tif (type === NODE) {\n\t\t\t\t\tdynamic = new DynamicNode(node as HTMLElement, node.nextSibling);\n\t\t\t\t} else if (type === ATTR) {\n\t\t\t\t\tdynamic = new DynamicAttribute(node as HTMLElement, templateDependency);\n\t\t\t\t} else if (type === TAG) {\n\t\t\t\t\tdynamic = new DynamicTag(node as HTMLElement);\n\t\t\t\t}\n\t\t\t\tdynamics.push(dynamic);\n\t\t\t\ttemplateDependency = dependencies[++dynamicIndex];\n\t\t\t}\n\t\t\tif (nodeIndex !== templateDependency?.index) {\n\t\t\t\tnode = treeWalker.nextNode()!;\n\t\t\t\tnodeIndex++;\n\t\t\t}\n\t\t}\n\t\ttreeWalker.currentNode = document;\n\t\treturn [fragment, dynamics];\n\t}\n}\n\n/**\n * This function is used to store dynamic parts of one component that used the value returned by the\n * `html` function. It allows to create kinda the same process of caching used by every component,\n * so a [dynamics] array is build and used to perform updated on the html result.\n */\nclass HtmlProcessedValue {\n\t/** The last values that the html function returned. */\n\tpublic values: any[];\n\t/** The parts of the render value. */\n\tpublic parts: TemplateStringsArray;\n\t/** The Cached template data returned by the `clone` function. */\n\tpublic template: [DocumentFragment, Dynamics[]];\n\n\tconstructor(render: RenderHtml, template: [DocumentFragment, Dynamics[]]) {\n\t\tthis.values = render.values;\n\t\tthis.parts = render.parts;\n\t\tthis.template = template;\n\t}\n}\n\n/**\n * Contains the data about a Dynamic node.\n */\nclass DynamicNode {\n\t/**\n\t * The start node marks the point on where dynamic nodes must be put after.\n\t * It's a static HTML element. Values between the startNode and endNode are known to be dynamic.\n\t */\n\tpublic startNode: ChildNode;\n\t/**\n\t * The end node marks the point on where dynamic nodes must be put before.\n\t * It's a static HTML element. Values between the startNode and endNode are known to be dynamic.\n\t */\n\tpublic endNode: ChildNode | null;\n\n\tpublic isNode: true = true; // For faster access\n\tpublic isAttr: false = false; // For faster access\n\tpublic isTag: false = false; // For faster access\n\n\t/**\n\t * Creates a new DynamicNode instance.\n\t * @param startNode The start node.\n\t * @param endNode The end node.\n\t */\n\tconstructor(startNode: ChildNode, endNode: ChildNode | null) {\n\t\tthis.startNode = startNode;\n\t\tthis.endNode = endNode;\n\t}\n\n\t/**\n\t * Removes all the nodes between the start and the end nodes.\n\t */\n\tpublic clearValue() {\n\t\tlet currentNode = this.startNode.nextSibling;\n\t\twhile (currentNode && currentNode !== this.endNode) {\n\t\t\tcurrentNode.remove();\n\t\t\tcurrentNode = this.startNode.nextSibling;\n\t\t}\n\t}\n\n\t/**\n\t * First removes all the nodes between the start and the end nodes, then it also removes the\n\t * start node and the end node.\n\t */\n\tpublic dispose() {\n\t\tthis.clearValue();\n\t\tthis.startNode.remove();\n\t\tif (this.endNode) this.endNode.remove();\n\t}\n}\n\n/**\n * Contains the data about a dynamic attribute.\n */\nclass DynamicAttribute {\n\t/** The node that owns the dynamic attribute */\n\tpublic node: HTMLElement;\n\t/** The name of the dynamic attribute. */\n\tpublic name: string;\n\t/**\n\t * If an attribute has only some dynamic parts, this property will contain the whole attribute\n\t * structure. E.g. class=\"button ${'hidden'}\".\n\t */\n\tpublic attrStructure: string;\n\n\tpublic isNode: false = false; // For faster access\n\tpublic isAttr: true = true; // For faster access\n\tpublic isTag: false = false; // For faster access\n\n\t/** The callback to execute when an event is fired. */\n\tprivate __callback: (event: Event) => void;\n\t/** True if an event has already been initialized. */\n\tprivate __eventInitialized = false;\n\n\t/**\n\t * Creates a new DynamicAttribute instance.\n\t * @param node The node that owns the attribute.\n\t * @param dependency The dependency metadata.\n\t */\n\tconstructor(node: HTMLElement, dependency: Dependency) {\n\t\tthis.node = node;\n\t\tthis.name = dependency.name;\n\t\tthis.attrStructure = dependency.attrDynamics;\n\t}\n\n\t/**\n\t * Update an attribute value.\n\t * @param newValue The new value of the attribute\n\t */\n\tpublic updateValue(newValue: any) {\n\t\tif (this.name === 'ref' && newValue.__wcRef) {\n\t\t\tnewValue.current = this.node;\n\t\t\tif ((this.node as WompoElement)._$wompo) {\n\t\t\t\tconst oldDisconnectedCallback = (this.node as WompoElement).onDisconnected;\n\t\t\t\t(this.node as WompoElement).onDisconnected = () => {\n\t\t\t\t\tnewValue.current = null;\n\t\t\t\t\toldDisconnectedCallback();\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tif (DEV_MODE && (this.name === 'wc-perf' || this.name == 'wcPerf'))\n\t\t\t(this.node as WompoElement)._$measurePerf = true;\n\t\tconst isWompoElement = (this.node as WompoElement)._$wompo;\n\t\tif (isWompoElement) (this.node as WompoElement).updateProp(this.name, newValue);\n\t\tconst isPrimitive = newValue !== Object(newValue);\n\t\tif (newValue === false || newValue === null || newValue === undefined)\n\t\t\tthis.node.removeAttribute(this.name);\n\t\telse if (isPrimitive && (!this.name.match(/[A-Z]/) || this.node.nodeName === 'svg'))\n\t\t\tthis.node.setAttribute(this.name, newValue);\n\t\telse if (this.name === 'style') {\n\t\t\tlet styleString = '';\n\t\t\tconst styles = Object.keys(newValue);\n\t\t\tfor (const key of styles) {\n\t\t\t\tlet styleValue = newValue[key];\n\t\t\t\tlet styleKey = key.replace(/[A-Z]/g, (letter) => '-' + letter.toLowerCase());\n\t\t\t\tif (typeof styleValue === 'number') styleValue = `${styleValue}px`;\n\t\t\t\tif (styleValue !== undefined && styleValue !== null && styleValue !== false)\n\t\t\t\t\tstyleString += `${styleKey}:${styleValue};`;\n\t\t\t}\n\t\t\tthis.node.setAttribute(this.name, styleString);\n\t\t}\n\t\tif (this.name === 'title' && isWompoElement) this.node.removeAttribute(this.name);\n\t}\n\n\t/**\n\t * Set the callback function to be executed when an event is fired. If the event has not been\n\t * initialized, the event listener will be added.\n\t */\n\tset callback(callback: (event: Event) => void) {\n\t\tif (!this.__eventInitialized) {\n\t\t\tconst eventName = this.name.substring(1);\n\t\t\tthis.node.addEventListener(eventName, this.__listener.bind(this));\n\t\t\tthis.__eventInitialized = true;\n\t\t}\n\t\tthis.__callback = callback;\n\t}\n\n\t/**\n\t * The listener that will execute the __callback function (if defined).\n\t * @param event The event object\n\t */\n\tprivate __listener(event: Event) {\n\t\tif (this.__callback) this.__callback(event);\n\t}\n}\n\n/**\n * Contains the data about a dynamic tag name.\n */\nclass DynamicTag {\n\t/** The node that has the dynamic tag. */\n\tpublic node: ChildNode;\n\n\tpublic isNode: false = false; // For faster access\n\tpublic isAttr: false = false; // For faster access\n\tpublic isTag: true = true; // For faster access\n\n\t/**\n\t * Creates a new DynamicTag instance.\n\t * @param node The node instance.\n\t */\n\tconstructor(node: ChildNode) {\n\t\tthis.node = node;\n\t}\n}\n\n/**\n * Holds the children of a component. They are stored in an array of nodes instead of an NodeList or\n * HTMLCollection, so that they are not lost and reusable when removed from the DOM.\n */\nclass WompoChildren {\n\tpublic nodes: Node[];\n\n\tpublic _$wompoChildren: true = true;\n\n\tconstructor(nodes: Node[]) {\n\t\tthis.nodes = nodes;\n\t}\n}\n\n/**\n * Hold the informations to efficiently update a dynamic value that is an array.\n */\nclass WompoArrayDependency {\n\t/** A list of dynamic nodes, used to know where each item of the array begins and ends. */\n\tpublic dynamics: DynamicNode[];\n\n\tpublic isArrayDependency: true = true; // For faster access\n\n\t/** The array containing the old values, for comparisons. */\n\tprivate __oldValues: any[];\n\t/** The array containing the old values, not modified by the __setValues function. */\n\tprivate __oldPureValues: any[];\n\t/** The parent dynamic node dependency. */\n\tprivate __parentDependency: DynamicNode;\n\n\t/**\n\t * Creates a new WompoArrayDependency instance.\n\t * @param values The array of values to put in the DOM\n\t * @param dependency The dynamic node dependency on which the array should be rendered.\n\t */\n\tconstructor(values: any[], dependency: DynamicNode) {\n\t\tthis.dynamics = [];\n\t\tthis.__oldValues = [];\n\t\tthis.__parentDependency = dependency;\n\t\tdependency.startNode.after(document.createComment('?wc-end'));\n\t\tthis.addDependenciesFrom(dependency.startNode as HTMLElement, values);\n\t\tthis.__oldPureValues = values;\n\t\t// this.__oldValues = __setValues(this.dynamics, values, []);\n\t}\n\n\t/**\n\t * This function will add markers (HTML comments) and generate dynamic nodes dependecies used to\n\t * efficiently udpate the values inside of the array.\n\t * @param startNode The start node on which insert the new \"single-item\" dependencies.\n\t * @param toAdd The values to add\n\t */\n\tprivate addDependenciesFrom(startNode: HTMLElement, toAdd: any[]) {\n\t\tlet currentNode = startNode;\n\t\tfor (let i = 0; i < toAdd.length; i++) {\n\t\t\tconst value = toAdd[i];\n\t\t\tcurrentNode.after('');\n\t\t\tconst dependency = new DynamicNode(currentNode, currentNode.nextSibling);\n\t\t\tcurrentNode = currentNode.nextSibling as HTMLElement;\n\t\t\tthis.dynamics.push(dependency);\n\t\t\tthis.__oldValues.push(__setValues([dependency], [value], [])[0]);\n\t\t}\n\t}\n\n\t/**\n\t * Check if there are dependencies to add/remove, and then set the new values to the old nodes.\n\t * Setting the new values will start an eventual recursive check for eventual nested arrays.\n\t * @param newValues The new values to check with the old ones fot updates.\n\t * @returns This instance.\n\t */\n\tpublic checkUpdates(newValues: any[]) {\n\t\tif (newValues === this.__oldPureValues) return this;\n\t\tlet diff = newValues.length - this.__oldValues.length;\n\t\tif (diff < 0) {\n\t\t\twhile (diff) {\n\t\t\t\tconst toClean = this.dynamics.pop();\n\t\t\t\tthis.__oldValues.pop();\n\t\t\t\ttoClean.dispose();\n\t\t\t\tdiff++;\n\t\t\t}\n\t\t}\n\t\tfor (let i = 0; i < this.dynamics.length; i++) {\n\t\t\tconst newValue = newValues[i];\n\t\t\tconst dependency = this.dynamics[i];\n\t\t\tconst oldValue = this.__oldValues[i];\n\t\t\tthis.__oldValues[i] = __setValues([dependency], [newValue], [oldValue])[0];\n\t\t}\n\t\tif (diff > 0) {\n\t\t\tlet currentNode = this.dynamics[this.dynamics.length - 1]?.endNode;\n\t\t\tif (!currentNode) currentNode = this.__parentDependency.startNode;\n\t\t\tfor (let i = 0; i < diff; i++) {\n\t\t\t\tconst value = newValues[this.__oldValues.length + i];\n\t\t\t\tcurrentNode.after('');\n\t\t\t\tconst dependency = new DynamicNode(currentNode, currentNode.nextSibling);\n\t\t\t\tcurrentNode = currentNode.nextSibling as HTMLElement;\n\t\t\t\tthis.dynamics.push(dependency);\n\t\t\t\tthis.__oldValues.push(__setValues([dependency], [value], []));\n\t\t\t}\n\t\t}\n\t\tthis.__oldPureValues = newValues;\n\t\treturn this;\n\t}\n}\n\n/* \n================================================\nSUPPORT FUNCTIONS\n================================================\n*/\n\n/**\n * Generates the static styles of a component. If the `cssModule` option in the component is\n * false, the generation will be skipped and the css will be taken as it is.\n * If the css contains an \":host\" selector, it'll be replaced or kept based on if the shadow option\n * is true, otherwise, a default \"display: block;\" style will be added in the component.\n * @returns an array of 2 values: the first is the generated CSS string, the second is an object\n * having as keys the original class names, and as the value the replaced class names.\n */\nconst __generateSpecifcStyles = (\n\tcomponent: WompoComponent,\n\toptions: WompoComponentOptions\n): [string, { [className: string]: string }] => {\n\tconst { css } = component;\n\tconst { shadow, name, cssModule } = options;\n\tconst componentName = name;\n\tconst classes: { [key: string]: string } = {};\n\tlet generatedCss = css;\n\tif (cssModule) {\n\t\tif (!css.includes(':host'))\n\t\t\tgeneratedCss = `${shadow ? ':host' : componentName} {display:block;} ${css}`;\n\t\tif (DEV_MODE) {\n\t\t\tconst invalidSelectors: string[] = [];\n\t\t\t// It's appropriate that at least one class is present in each selector\n\t\t\t[...generatedCss.matchAll(/.*?}([\\s\\S]*?){/gm)].forEach((selector) => {\n\t\t\t\tconst cssSelector = selector[1].trim();\n\t\t\t\tif (!cssSelector.match(/\\.|:host|@/)) invalidSelectors.push(cssSelector);\n\t\t\t});\n\t\t\tinvalidSelectors.forEach((selector) => {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t`The CSS selector \"${selector} {...}\" in the component \"${componentName}\" is not enough` +\n\t\t\t\t\t\t` specific: include at least one class or deactive the \"cssModule\" option on the component.`\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\t\tif (!shadow) generatedCss = generatedCss.replace(/:host/g, componentName);\n\t\tgeneratedCss = generatedCss.replace(/\\.(?!\\d)([_a-zA-Z0-9-]+)/gm, (_, className) => {\n\t\t\tconst uniqueClassName = `${componentName}__${className}`;\n\t\t\tclasses[className] = uniqueClassName;\n\t\t\treturn `.${uniqueClassName}`;\n\t\t});\n\t}\n\treturn [generatedCss, classes];\n};\n\n/**\n * This function will create the valid HTML string to put in a template, used then to create the DOM\n * of a component and obtain the dynamic metadata.\n * @param parts The static parts of the `html` function.\n * @returns An array having 2 values: the generated HTML string, and a list of attribute names that\n * are known to be dynamic.\n */\nconst __createHtml = (parts: TemplateStringsArray): [string, string[]] => {\n\tlet html = '';\n\tconst attributes = [];\n\tconst length = parts.length - 1;\n\tlet attrDelimiter = '';\n\tlet textTagName = '';\n\tfor (let i = 0; i < length; i++) {\n\t\tlet part = parts[i];\n\t\t// End of values inside an attribute\n\t\tif (attrDelimiter && part.includes(attrDelimiter)) attrDelimiter = '';\n\t\t// End of values inside a text node (script, textarea, title, style)\n\t\tif (textTagName && new RegExp(`<\\/${textTagName}>`)) textTagName = '';\n\t\tif (attrDelimiter || textTagName) {\n\t\t\t// We are inside an attribute\n\t\t\thtml += part + WC_MARKER;\n\t\t} else {\n\t\t\t// If the Regex is global, it will start from the index past the end of the last match.\n\t\t\tisAttrRegex.lastIndex = 0;\n\t\t\tconst isAttr = isAttrRegex.exec(part);\n\t\t\tif (isAttr) {\n\t\t\t\tconst [match, attrName] = isAttr;\n\t\t\t\tconst beforeLastChar = match[match.length - 1];\n\t\t\t\tattrDelimiter = beforeLastChar === '\"' || beforeLastChar === \"'\" ? beforeLastChar : '';\n\t\t\t\tpart = part.substring(0, part.length - attrDelimiter.length - 1);\n\t\t\t\tlet toAdd = `${part}${WC_MARKER}=`;\n\t\t\t\tif (attrDelimiter) toAdd += `${attrDelimiter}${WC_MARKER}`;\n\t\t\t\telse toAdd += '\"0\"';\n\t\t\t\thtml += toAdd;\n\t\t\t\tattributes.push(attrName);\n\t\t\t} else {\n\t\t\t\tif (part.match(isDynamicTagRegex)) {\n\t\t\t\t\thtml += part + DYNAMIC_TAG_MARKER;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tisInsideTextTag.lastIndex = 0;\n\t\t\t\tconst insideTextTag = isInsideTextTag.exec(part);\n\t\t\t\tif (insideTextTag) {\n\t\t\t\t\ttextTagName = insideTextTag[1];\n\t\t\t\t\thtml += part + WC_MARKER;\n\t\t\t\t} else {\n\t\t\t\t\t// It's a child node\n\t\t\t\t\thtml += part + `<?${WC_MARKER}>`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\thtml += parts[parts.length - 1];\n\thtml = html.replace(selfClosingRegex, (match, firstPart, componentName) => {\n\t\tif (match.endsWith('/>')) return `${firstPart}></${componentName}>`;\n\t\treturn match;\n\t});\n\thtml = html.replace(/<[a-z]*-[a-z]*\\s?.*?>/gms, (match) => {\n\t\treturn match.replace(/\\s([a-z]*[A-Z][a-z]*)[=\\s]/gms, (attr) =>\n\t\t\tattr.replace(/[A-Z]/g, (letter) => `-${letter.toLowerCase()}`)\n\t\t);\n\t});\n\treturn [html, attributes];\n};\n\n/**\n * Based on a template content, this function will extract the dynamic dependecies, and build the\n * metadata used to efficiently update the nodes during re-render.\n * @param template An HTML Template element\n * @param parts The parts returned by the `html` function\n * @param attributes The dynamic attribute names obtained by the `__createHtml` function.\n * @returns The list of elaborated dependencies\n */\nconst __createDependencies = (\n\ttemplate: HTMLTemplateElement,\n\tparts: TemplateStringsArray,\n\tattributes: string[]\n) => {\n\tconst dependencies = [];\n\ttreeWalker.currentNode = template.content;\n\tlet node: Element;\n\tlet dependencyIndex = 0;\n\tlet nodeIndex = 0;\n\tconst partsLength = parts.length;\n\twhile (((node as Node) = treeWalker.nextNode()) !== null && dependencies.length < partsLength) {\n\t\t// Is a \"normal\" node\n\t\tif (node.nodeType === 1) {\n\t\t\tif (node.nodeName === DYNAMIC_TAG_MARKER.toUpperCase()) {\n\t\t\t\tconst dependency: Dependency = {\n\t\t\t\t\ttype: TAG,\n\t\t\t\t\tindex: nodeIndex,\n\t\t\t\t};\n\t\t\t\tdependencies.push(dependency);\n\t\t\t}\n\t\t\tif (node.hasAttributes()) {\n\t\t\t\tconst attributeNames = node.getAttributeNames();\n\t\t\t\tfor (const attrName of attributeNames) {\n\t\t\t\t\tif (attrName.endsWith(WC_MARKER)) {\n\t\t\t\t\t\tconst realName = attributes[dependencyIndex++];\n\t\t\t\t\t\tconst attrValue = node.getAttribute(attrName);\n\t\t\t\t\t\tif (attrValue !== '0') {\n\t\t\t\t\t\t\tconst dynamicParts = attrValue.split(WC_MARKER);\n\t\t\t\t\t\t\tfor (let i = 0; i < dynamicParts.length - 1; i++) {\n\t\t\t\t\t\t\t\tconst dependency: Dependency = {\n\t\t\t\t\t\t\t\t\ttype: ATTR,\n\t\t\t\t\t\t\t\t\tindex: nodeIndex,\n\t\t\t\t\t\t\t\t\tattrDynamics: attrValue,\n\t\t\t\t\t\t\t\t\tname: realName,\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tdependencies.push(dependency);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst dependency: Dependency = {\n\t\t\t\t\t\t\t\ttype: ATTR,\n\t\t\t\t\t\t\t\tindex: nodeIndex,\n\t\t\t\t\t\t\t\tname: realName,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tdependencies.push(dependency);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnode.removeAttribute(attrName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// A text node should be created for each dynamic part inside of\n\t\t\t// nodes that only have text nodes inside (script, style, textarea, title).\n\t\t\tif (onlyTextChildrenElementsRegex.test(node.tagName)) {\n\t\t\t\tconst strings = node.textContent!.split(WC_MARKER);\n\t\t\t\tconst lastIndex = strings.length - 1;\n\t\t\t\tif (lastIndex > 0) {\n\t\t\t\t\tnode.textContent = '';\n\t\t\t\t\tfor (let i = 0; i < lastIndex; i++) {\n\t\t\t\t\t\tnode.append(strings[i], document.createComment(''));\n\t\t\t\t\t\t// Walk past the marker node we just added\n\t\t\t\t\t\ttreeWalker.nextNode();\n\t\t\t\t\t\tdependencies.push({ type: NODE, index: ++nodeIndex });\n\t\t\t\t\t}\n\t\t\t\t\t// It's not necessary to adjust nodeIndex here\n\t\t\t\t\tnode.append(strings[lastIndex], document.createComment(''));\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (node.nodeType === 8) {\n\t\t\t// Is a comment\n\t\t\tconst data = (node as unknown as Comment).data;\n\t\t\tif (data === `?${WC_MARKER}`) dependencies.push({ type: NODE, index: nodeIndex });\n\t\t}\n\t\tnodeIndex++;\n\t}\n\treturn dependencies;\n};\n\n/**\n * Create a new CachedTemplate, by first obtaining the html content string, and then creating the\n * dependencies. The newly created template will be then used by components of the same type.\n * @param parts The parts returned by the `html` function.\n * @returns a new instance of CachedTemplate\n */\nconst __createTemplate = (html: RenderHtml) => {\n\tconst [dom, attributes] = __createHtml(html.parts);\n\tconst template = document.createElement('template');\n\ttemplate.innerHTML = dom;\n\tconst dependencies = __createDependencies(template, html.parts, attributes);\n\treturn new CachedTemplate(template, dependencies);\n};\n\n/**\n * This function will compare the parts of the new and old template. If one of the parts differs,\n * means the 2 templates are not equal.\n * @param render The whole result of the `html` function\n * @returns The string representation of the the template.\n */\nconst __areSameTemplates = (newTemplate: RenderHtml, oldTemplate: RenderHtml) => {\n\tif (!newTemplate || !oldTemplate) return false;\n\tconst newParts = newTemplate.parts;\n\tconst oldParts = oldTemplate.parts;\n\tif (newParts.length !== oldParts?.length) return false;\n\tconst newValues = newTemplate.values;\n\tconst oldValues = oldTemplate.values;\n\tfor (let i = 0; i < newParts.length; i++) {\n\t\tif (newParts[i] !== oldParts[i]) return false;\n\t\tif (newValues[i]?._$wompoF) {\n\t\t\tif (!oldValues[i]?._$wompoF) return false;\n\t\t\tif (newValues[i].componentName !== oldValues[i].componentName) return false;\n\t\t}\n\t}\n\treturn true;\n};\n\n/**\n * Compare the old value with the new value, and returns true if they differs.\n * @param currentValue The current value\n * @param oldValue The old value\n * @param dependency The dependency that includes the value\n * @returns True if the dependency should be updated\n */\nconst __shouldUpdate = (currentValue: any, oldValue: any, dependency: Dynamics) => {\n\tconst valuesDiffers = currentValue !== oldValue;\n\tconst isComposedAttribute = !!(dependency as DynamicAttribute).attrStructure;\n\tconst isWompoChildren = currentValue?._$wompoChildren;\n\tconst childrenNeedUpdate =\n\t\tisWompoChildren && (dependency as DynamicNode).startNode.nextSibling !== currentValue.nodes[0];\n\treturn valuesDiffers || isComposedAttribute || childrenNeedUpdate;\n};\n\nconst __handleDynamicTag = (\n\tcurrentValue: any,\n\tcurrentDependency: DynamicTag,\n\tvalueIndex: number,\n\tdynamics: Dynamics[],\n\tvalues: any[]\n) => {\n\tconst node = currentDependency.node;\n\tlet customElement: HTMLElement = null;\n\tconst isCustomComponent = currentValue._$wompoF;\n\tconst newNodeName: string = isCustomComponent ? currentValue.componentName : currentValue;\n\tif (node.nodeName !== newNodeName.toUpperCase()) {\n\t\tconst oldAttributes = (node as HTMLElement).getAttributeNames();\n\t\tif (isCustomComponent) {\n\t\t\tconst initialProps: any = {};\n\t\t\tfor (const attrName of oldAttributes) {\n\t\t\t\t// attributes on the dom will be set when creating the element\n\t\t\t\tconst attrValue = (node as HTMLElement).getAttribute(attrName);\n\t\t\t\tlet propName = attrName;\n\t\t\t\tif (propName.includes('-')) propName = propName.replace(/-(.)/g, (_, l) => l.toUpperCase());\n\t\t\t\tinitialProps[propName] = attrValue === '' ? true : attrValue;\n\t\t\t}\n\t\t\tcustomElement = new currentValue.class() as WompoElement;\n\t\t\t(customElement as WompoElement)._$initialProps = initialProps;\n\t\t\tconst childNodes = node.childNodes;\n\t\t\twhile (childNodes.length) {\n\t\t\t\tcustomElement.appendChild(childNodes[0]);\n\t\t\t}\n\t\t} else {\n\t\t\t// Is normal element\n\t\t\tcustomElement = document.createElement(newNodeName);\n\t\t\tfor (const attrName of oldAttributes) {\n\t\t\t\tcustomElement.setAttribute(attrName, (node as HTMLElement).getAttribute(attrName));\n\t\t\t}\n\t\t}\n\t\tlet index = valueIndex;\n\t\tlet currentDynamic = dynamics[index] as DynamicAttribute;\n\t\twhile (currentDynamic?.node === node) {\n\t\t\t// Update node pointer of dynamics pointing to the old one.\n\t\t\tcurrentDynamic.node = customElement;\n\t\t\tif (index === valueIndex) {\n\t\t\t\t// Skip first value, which is the dynamic node itself.\n\t\t\t\tindex++;\n\t\t\t\tcurrentDynamic = dynamics[index] as DynamicAttribute;\n\t\t\t} else {\n\t\t\t\t// Set initial props of the correct type, so a number doesn't become a string\n\t\t\t\tif (currentDynamic?.name && currentDynamic?.name !== 'ref')\n\t\t\t\t\t((customElement as WompoElement)._$initialProps as any)[currentDynamic.name] =\n\t\t\t\t\t\tvalues[index];\n\t\t\t\tindex++;\n\t\t\t\tcurrentDynamic = dynamics[index] as DynamicAttribute;\n\t\t\t}\n\t\t}\n\t\tnode.replaceWith(customElement);\n\t\treturn customElement;\n\t}\n};\n\n/**\n * This function will compare the values of the previous render with the current one, and update the\n * DOM accordingly.\n * This function alters the original [dynamics] array: **it's not pure**.\n * @param dynamics The array of dynamic dependencies\n * @param values The new values of the render\n * @param oldValues The old values used in the previous render\n * @returns A modified version of the new values\n */\nconst __setValues = (dynamics: Dynamics[], values: any[], oldValues: any[]) => {\n\tconst newValues = [...values];\n\tfor (let i = 0; i < dynamics.length; i++) {\n\t\tconst currentDependency = dynamics[i];\n\t\tconst currentValue = newValues[i];\n\t\tconst oldValue = oldValues[i];\n\t\t// Update References\n\t\tif (currentValue?.__wcRef && currentDependency.isAttr && currentDependency.name === 'ref')\n\t\t\tcurrentValue.current = currentDependency.node;\n\t\tif (!__shouldUpdate(currentValue, oldValue, currentDependency))\n\t\t\t// Skip update: values are the same\n\t\t\tcontinue;\n\t\tif (currentDependency.isNode) {\n\t\t\t// Falsy values are cleared from the DOM\n\t\t\tif (currentValue === false || currentValue === undefined || currentValue === null) {\n\t\t\t\tcurrentDependency.clearValue();\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (currentValue?._$wompoHtml) {\n\t\t\t\t// handle template elements\n\t\t\t\tconst areTheSame = __areSameTemplates(currentValue, oldValue);\n\t\t\t\tif (oldValue === undefined || !areTheSame) {\n\t\t\t\t\tconst cachedTemplate = __createTemplate(currentValue);\n\t\t\t\t\tconst template = cachedTemplate.clone();\n\t\t\t\t\tconst [fragment, dynamics] = template;\n\t\t\t\t\tnewValues[i] = new HtmlProcessedValue(currentValue, template);\n\t\t\t\t\tnewValues[i].values = __setValues(\n\t\t\t\t\t\tdynamics,\n\t\t\t\t\t\tcurrentValue.values,\n\t\t\t\t\t\toldValue?.values ?? oldValue ?? []\n\t\t\t\t\t);\n\t\t\t\t\tconst startNode = (currentDependency as DynamicNode).startNode;\n\t\t\t\t\tcurrentDependency.clearValue();\n\t\t\t\t\tlet currentNode = startNode;\n\t\t\t\t\twhile (fragment.childNodes.length) {\n\t\t\t\t\t\tcurrentNode.after(fragment.childNodes[0]);\n\t\t\t\t\t\tcurrentNode = currentNode.nextSibling;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlet oldTemplateValue = oldValue as HtmlProcessedValue;\n\t\t\t\t\tif (!oldValue.template) {\n\t\t\t\t\t\tconst cachedTemplate = __createTemplate(currentValue);\n\t\t\t\t\t\tconst template = cachedTemplate.clone();\n\t\t\t\t\t\tnewValues[i] = new HtmlProcessedValue(currentValue, template);\n\t\t\t\t\t\toldTemplateValue = newValues[i];\n\t\t\t\t\t}\n\t\t\t\t\tconst [_, dynamics] = oldTemplateValue.template;\n\t\t\t\t\tconst processedValues = __setValues(\n\t\t\t\t\t\tdynamics,\n\t\t\t\t\t\tcurrentValue.values,\n\t\t\t\t\t\t(oldValue as HtmlProcessedValue).values\n\t\t\t\t\t);\n\t\t\t\t\t(oldValue as HtmlProcessedValue).values = processedValues;\n\t\t\t\t\tnewValues[i] = oldValue;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// It's not necessary to check every single node: if a dependency updates,\n\t\t\t// it'll be automatically updated. It's only necessary to update the\n\t\t\t// textContent of primitive values.\n\t\t\tconst isPrimitive = currentValue !== Object(currentValue);\n\t\t\tconst oldIsPrimitive = oldValue !== Object(oldValue) && oldValue !== undefined;\n\t\t\tconst startNode = currentDependency.startNode;\n\t\t\tif (isPrimitive) {\n\t\t\t\tif (oldIsPrimitive) {\n\t\t\t\t\t// At this point there's already a content in the node\n\t\t\t\t\tif (startNode.nextSibling) startNode.nextSibling.textContent = currentValue;\n\t\t\t\t\telse startNode.after(currentValue);\n\t\t\t\t} else {\n\t\t\t\t\tcurrentDependency.clearValue();\n\t\t\t\t\tstartNode.after(currentValue);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlet currentNode = startNode.nextSibling;\n\t\t\t\tlet newNodeIndex = 0;\n\t\t\t\tlet index = 0;\n\t\t\t\tif (currentValue._$wompoChildren) {\n\t\t\t\t\tif (oldValue && !oldValue?._$wompoChildren) currentDependency.clearValue();\n\t\t\t\t\tconst childrenNodes = (currentValue as WompoChildren).nodes;\n\t\t\t\t\twhile (index < childrenNodes.length) {\n\t\t\t\t\t\tif (!currentNode || index === 0) currentNode = startNode;\n\t\t\t\t\t\tconst newNode = childrenNodes[newNodeIndex];\n\t\t\t\t\t\tnewNodeIndex++;\n\t\t\t\t\t\tcurrentNode.after(newNode);\n\t\t\t\t\t\tcurrentNode = currentNode.nextSibling;\n\t\t\t\t\t\tindex++;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (Array.isArray(currentValue)) {\n\t\t\t\t\t\tif (!(oldValue as WompoArrayDependency)?.isArrayDependency) {\n\t\t\t\t\t\t\tcurrentDependency.clearValue();\n\t\t\t\t\t\t\tnewValues[i] = new WompoArrayDependency(currentValue, currentDependency);\n\t\t\t\t\t\t} else newValues[i] = (oldValue as WompoArrayDependency).checkUpdates(currentValue);\n\t\t\t\t\t} else if (DEV_MODE) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t'Rendering objects is not supported. Please stringify or remove the object.'\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (currentDependency.isAttr) {\n\t\t\tconst attrName = currentDependency.name;\n\t\t\tif (attrName.startsWith('@')) {\n\t\t\t\tcurrentDependency.callback = currentValue;\n\t\t\t} else {\n\t\t\t\tconst attrStructure = currentDependency.attrStructure;\n\t\t\t\tif (attrStructure) {\n\t\t\t\t\tconst parts = attrStructure.split(WC_MARKER);\n\t\t\t\t\tlet dynamicValue = currentValue;\n\t\t\t\t\tfor (let j = 0; j < parts.length - 1; j++) {\n\t\t\t\t\t\tparts[j] = `${parts[j]}${dynamicValue}`;\n\t\t\t\t\t\ti++; // Go to the next dynamic value\n\t\t\t\t\t\tdynamicValue = newValues[i];\n\t\t\t\t\t}\n\t\t\t\t\ti--; // Since it'll be already increased in the loop, decrease by one\n\t\t\t\t\tcurrentDependency.updateValue(parts.join('').trim());\n\t\t\t\t} else {\n\t\t\t\t\tcurrentDependency.updateValue(currentValue);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (currentDependency.isTag) {\n\t\t\tconst isLazy = currentValue._$wompoLazy;\n\t\t\tif (isLazy) {\n\t\t\t\tconst node = currentDependency.node;\n\t\t\t\tconst suspenseNode = findSuspense(node) as SuspenseInstance | null;\n\t\t\t\tif (suspenseNode) {\n\t\t\t\t\tif (suspenseNode.addSuspense) {\n\t\t\t\t\t\tsuspenseNode.addSuspense(node);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsuspenseNode.loadingComponents = new Set();\n\t\t\t\t\t\tsuspenseNode.loadingComponents.add(node);\n\t\t\t\t\t}\n\t\t\t\t\t(node as any).suspense = suspenseNode;\n\t\t\t\t}\n\t\t\t\t// Catch is handled inside the lazy() function.\n\t\t\t\tcurrentValue().then((Component: WompoComponent) => {\n\t\t\t\t\tconst customElement = __handleDynamicTag(\n\t\t\t\t\t\tComponent,\n\t\t\t\t\t\tcurrentDependency,\n\t\t\t\t\t\ti,\n\t\t\t\t\t\tdynamics,\n\t\t\t\t\t\tvalues\n\t\t\t\t\t);\n\t\t\t\t\tif (suspenseNode) suspenseNode.removeSuspense(node, customElement);\n\t\t\t\t});\n\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\t__handleDynamicTag(currentValue, currentDependency, i, dynamics, values);\n\t\t\t}\n\t\t}\n\t}\n\treturn newValues;\n};\n\n/* \n================================================\nWOMPO COMPONENT DEFINITION\n================================================\n*/\n/**\n * This function will convert the functional component into an extension class of the HTMLElement,\n * so that it can be used to create the custom web-component.\n * @param Component The Component function\n * @param options The options of the component.\n * @returns A new dynamic class that will be used to create the custom web-component\n */\nconst _$wompo = <Props extends WompoProps, E>(\n\tComponent: WompoComponent,\n\toptions: WompoComponentOptions\n): WompoElementClass<Props, E> => {\n\tconst { generatedCSS, styles } = Component.options;\n\tconst sheet = new CSSStyleSheet();\n\tsheet.replaceSync(generatedCSS);\n\t/**\n\t * The dynamic class created to make it possible to create a custom web-component\n\t */\n\tconst WompoComponent = class extends HTMLElement implements WompoElement {\n\t\tstatic _$wompo = true; // For faster access\n\n\t\t/** The component name, used in the DOM */\n\t\tstatic componentName = options.name;\n\t\t/**\n\t\t * The cached template created in the first item's render, and then reused across all\n\t\t * components.\n\t\t */\n\t\tstatic _$cachedTemplate: CachedTemplate;\n\n\t\t/**\n\t\t * Get the already present cached template, or create a new one if the component is rendering\n\t\t * for the first time.\n\t\t * @param parts The template parts from the html function.\n\t\t * @returns The cached template.\n\t\t */\n\t\tstatic _$getOrCreateTemplate(html: RenderHtml) {\n\t\t\tif (!this._$cachedTemplate) this._$cachedTemplate = __createTemplate(html);\n\t\t\treturn this._$cachedTemplate;\n\t\t}\n\n\t\tpublic _$wompo: true = true; // For faster access\n\n\t\tpublic props: WompoProps = {};\n\t\tpublic hooks: Hook[] = [];\n\t\tpublic _$measurePerf: boolean = false;\n\t\tpublic _$initialProps: WompoProps = {} as any;\n\t\tpublic _$usesContext: boolean = false;\n\t\tpublic _$hasBeenMoved: boolean = false;\n\t\tpublic _$layoutEffects: EffectHook[] = [];\n\n\t\t/** The Root. It'll be the node itself, or it's ShadowRoot if shadow is set to true */\n\t\tprivate __ROOT: this | ShadowRoot;\n\t\t/** The array containing metadata of the component, used to render the component */\n\t\tprivate __dynamics: Dynamics[];\n\t\t/** It'll be true if the component has already processing an update. */\n\t\tprivate __updating: boolean = false;\n\t\t/** The array containing the dynamic values of the last render. */\n\t\tprivate __oldValues: any[] = [];\n\t\t/** It'll be true if the component is currently initializing. */\n\t\tprivate __isInitializing: boolean = true;\n\t\t/** It's true if the component is connected to the DOM. */\n\t\tprivate __connected: boolean = false;\n\t\t/** It's true if the component has been disconnected from the DOM. */\n\t\tprivate __disconnected: boolean = false;\n\t\t/**\n\t\t * Used to know if a component has been completely removed from the DOM or only temporarely to\n\t\t * move it from a node to another.\n\t\t */\n\t\tprivate __isInDOM: boolean = false;\n\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t}\n\n\t\t/** @override component has been connected to the DOM */\n\t\tconnectedCallback() {\n\t\t\t// If the element is disconnected and connected again, then execute again all effects.\n\t\t\tif (this.__disconnected && this.isConnected) {\n\t\t\t\tthis.__disconnected = false;\n\t\t\t\tfor (const hook of this.hooks) {\n\t\t\t\t\tif ((hook as EffectHook)?.callback) (hook as EffectHook).callback();\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.__isInDOM = true;\n\t\t\tif (!this.__connected && this.isConnected) this.__initElement();\n\t\t}\n\n\t\t/** @override component has been disconnected from the DOM */\n\t\tdisconnectedCallback() {\n\t\t\t// When a component is just \"moved\" to another element but not\n\t\t\t// removed from the DOM, it still calls the disconnected and\n\t\t\t// then the connected callback again. This prevents it.\n\t\t\tif (this.__connected) {\n\t\t\t\tthis.__isInDOM = false;\n\t\t\t\tPromise.resolve().then(() => {\n\t\t\t\t\t// If the connectedCallback is called again, isInTheDOM will be true\n\t\t\t\t\tif (!this.__isInDOM) {\n\t\t\t\t\t\tthis.onDisconnected();\n\t\t\t\t\t\tthis.__disconnected = true;\n\t\t\t\t\t\tfor (const hook of this.hooks) {\n\t\t\t\t\t\t\tif ((hook as EffectHook)?.cleanupFunction) (hook as any).cleanupFunction();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._$hasBeenMoved = true;\n\t\t\t\t\t\tif (this._$usesContext) this.requestRender();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * This public callback will be used when a component is removed permanently from the DOM.\n\t\t * It allows other code to hook into the component and unmount listeners or similar when the\n\t\t * component is disconnected from the DOM.\n\t\t */\n\t\tpublic onDisconnected() {}\n\n\t\t/**\n\t\t * Initializes the component with the state, props, and styles.\n\t\t */\n\t\tprivate __initElement() {\n\t\t\tthis.__ROOT = this; // Shadow DOM is eventually attached later\n\t\t\tthis.props = {\n\t\t\t\t...this.props,\n\t\t\t\t...this._$initialProps,\n\t\t\t\tstyles: styles,\n\t\t\t} as any;\n\n\t\t\tconst componentAttributes = this.getAttributeNames();\n\t\t\tfor (const attrName of componentAttributes) {\n\t\t\t\tlet propName = attrName;\n\t\t\t\tif (propName.includes('-')) propName = propName.replace(/-(.)/g, (_, l) => l.toUpperCase());\n\t\t\t\tif (!this.props.hasOwnProperty(propName)) {\n\t\t\t\t\tconst attrValue = this.getAttribute(attrName);\n\t\t\t\t\t(this.props as any)[propName] = attrValue === '' ? true : attrValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set initialProps as attributes\n\t\t\tconst initialPropsKeys = Object.keys(this._$initialProps);\n\t\t\tfor (const key of initialPropsKeys) {\n\t\t\t\tconst prop = this._$initialProps[key as keyof typeof this._$initialProps];\n\t\t\t\tif (prop !== Object(prop) && (prop || (prop as any) === 0) && key !== 'title') {\n\t\t\t\t\tthis.setAttribute(\n\t\t\t\t\t\tkey.replace(/[A-Z]/g, (l) => `-${l.toLowerCase()}`),\n\t\t\t\t\t\tprop.toString()\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (DEV_MODE && this.props.wcPerf) this._$measurePerf = true;\n\n\t\t\tif (DEV_MODE && this._$measurePerf) console.time('First render ' + options.name);\n\t\t\t// The children are saved in a WompoChildren instance, so that\n\t\t\t// they are not lost even when disconnected from the DOM.\n\t\t\tconst childNodes = this.__ROOT.childNodes;\n\t\t\tconst childrenArray: Node[] = [];\n\t\t\t// Removing items from the DOM doesn't delete them.\n\t\t\twhile (childNodes.length) {\n\t\t\t\tchildrenArray.push(childNodes[0]);\n\t\t\t\tchildNodes[0].remove();\n\t\t\t}\n\t\t\tconst children = new WompoChildren(childrenArray);\n\t\t\tthis.props.children = children;\n\n\t\t\t// Create shadow DOM\n\t\t\tif (options.shadow && !this.shadowRoot) this.__ROOT = this.attachShadow({ mode: 'open' });\n\n\t\t\tif (options.shadow) {\n\t\t\t\t(this.__ROOT as ShadowRoot).adoptedStyleSheets = [sheet];\n\t\t\t} else {\n\t\t\t\tconst root = this.getRootNode();\n\t\t\t\t(root as Document | ShadowRoot).adoptedStyleSheets.push(sheet);\n\t\t\t}\n\n\t\t\t// Render\n\t\t\tthis.__render();\n\n\t\t\tthis.__isInitializing = false;\n\t\t\tthis.__connected = true;\n\n\t\t\t// Observe attributes mutations\n\t\t\tnew MutationObserver((mutationRecords) => {\n\t\t\t\tif (!this.__updating) {\n\t\t\t\t\tmutationRecords.forEach((record) => {\n\t\t\t\t\t\tif (!mutationAttributesExclusions.includes(record.attributeName)) {\n\t\t\t\t\t\t\tlet propName = record.attributeName;\n\t\t\t\t\t\t\tif (propName.includes('-'))\n\t\t\t\t\t\t\t\tpropName = propName.replace(/-(.)/g, (_, l) => l.toUpperCase());\n\t\t\t\t\t\t\tthis.updateProp(propName, this.getAttribute(record.attributeName));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}).observe(this, { attributes: true });\n\n\t\t\tif (DEV_MODE && this._$measurePerf) console.timeEnd('First render ' + options.name);\n\t\t}\n\n\t\t/**\n\t\t * Calls the functional component by first setting correct values to the\n\t\t * [currentRenderingComponent] and [currentHookIndex] variables.\n\t\t * @returns The result of the call.\n\t\t */\n\t\tprivate __callComponent() {\n\t\t\tcurrentRenderingComponent = this;\n\t\t\tcurrentHookIndex = 0;\n\t\t\tconst result = Component.call(this, this.props);\n\t\t\tlet renderHtml: RenderHtml = result as RenderHtml;\n\t\t\tif (typeof result === 'string' || result instanceof HTMLElement) renderHtml = html`${result}`;\n\t\t\treturn renderHtml;\n\t\t}\n\n\t\t/**\n\t\t * Calls the component and executes the operations to update the DOM.\n\t\t */\n\t\tprivate __render() {\n\t\t\ttry {\n\t\t\t\tconst renderHtml = this.__callComponent();\n\t\t\t\tif (renderHtml === null || renderHtml === undefined) {\n\t\t\t\t\tthis.remove();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst constructor = this.constructor as typeof WompoComponent;\n\t\t\t\tif (this.__isInitializing) {\n\t\t\t\t\tconst template = constructor._$getOrCreateTemplate(renderHtml);\n\t\t\t\t\tconst [fragment, dynamics] = template.clone();\n\t\t\t\t\tthis.__dynamics = dynamics;\n\t\t\t\t\tconst elaboratedValues = __setValues(\n\t\t\t\t\t\tthis.__dynamics,\n\t\t\t\t\t\trenderHtml.values,\n\t\t\t\t\t\tthis.__oldValues\n\t\t\t\t\t);\n\t\t\t\t\tthis.__oldValues = elaboratedValues;\n\t\t\t\t\tif (!this.__isInitializing) this.__ROOT.innerHTML = '';\n\t\t\t\t\twhile (fragment.childNodes.length) {\n\t\t\t\t\t\tthis.__ROOT.appendChild(fragment.childNodes[0]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst oldValues = __setValues(this.__dynamics, renderHtml.values, this.__oldValues);\n\t\t\t\t\tthis.__oldValues = oldValues;\n\t\t\t\t}\n\t\t\t\twhile (this._$layoutEffects.length) {\n\t\t\t\t\tconst layoutEffectHook = this._$layoutEffects.pop();\n\t\t\t\t\tlayoutEffectHook.cleanupFunction = layoutEffectHook.callback();\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t\tif (DEV_MODE) {\n\t\t\t\t\tconst error = new WompoError.class();\n\t\t\t\t\t(error.props as WompoErrorProps).error = err;\n\t\t\t\t\t(error.props as WompoErrorProps).element = this;\n\t\t\t\t\tthis.__ROOT.innerHTML = '';\n\t\t\t\t\tthis.__ROOT.appendChild(error);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * It requests a render to the component. If the component has already received a render\n\t\t * request, the request will be rejected. This is to avoid multiple re-renders when it's not\n\t\t * necessary. The following function will cause a single re-render:\n\t\t * ```javascript\n\t\t * const incBy2 = () => {\n\t\t *   setState((oldState) => oldState + 1)\n\t\t *   setState((oldState) => oldState + 1)\n\t\t * }\n\t\t * ```\n\t\t */\n\t\tpublic requestRender() {\n\t\t\tif (!this.__updating) {\n\t\t\t\tthis.__updating = true;\n\t\t\t\tPromise.resolve().then(() => {\n\t\t\t\t\tif (DEV_MODE && this._$measurePerf) console.time('Re-render ' + options.name);\n\t\t\t\t\tthis.__render();\n\t\t\t\t\tthis.__updating = false;\n\t\t\t\t\tthis._$hasBeenMoved = false;\n\t\t\t\t\tif (DEV_MODE && this._$measurePerf) console.timeEnd('Re-render ' + options.name);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * It'll set a new value to a specific prop of the component, and a re-render will be requested.\n\t\t * @param prop The prop name.\n\t\t * @param value The new value to set.\n\t\t */\n\t\tpublic updateProp(prop: string, value: any) {\n\t\t\tif ((this.props as any)[prop] !== value) {\n\t\t\t\t(this.props as any)[prop] = value;\n\t\t\t\tif (!this.__isInitializing) {\n\t\t\t\t\tthis.requestRender();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\treturn WompoComponent as unknown as WompoElementClass<Props, E>;\n};\n\n/* \n================================================\nHOOKS\n================================================\n*/\n\n/**\n * This generic hook will allow the creation of custom hooks by exposing the current rendering\n * component and the current hook index. They will be returned in an array of 2 element:\n * [currentComponent, currentIndex].\n * The currentHookIndex will be then automatically incremented, so that the developer will not have\n * to worry about it, avoiding potential bugs.\n * @returns The current rendering component and current index.\n */\nexport const useHook = (): [WompoElement, number] => {\n\tconst currentComponent = currentRenderingComponent;\n\tconst currentIndex = currentHookIndex;\n\tconst res: [WompoElement, number] = [currentComponent, currentIndex];\n\tcurrentHookIndex++;\n\treturn res;\n};\n\n/**\n * This hook will allow a component to request a re-render when the property changes. It accepts one\n * parameter, which is the initial value, and it'll return an array containing 2 values: the current\n * value and a function to update it. The value will not be directly modifiable: it's necessary to\n * call the set function with the new value. The set function can be:\n *\n * 1. The new value\n * 2. A function that has the old state as a parameter, and returns the new value.\n *\n * The second case should be used in the following conditions:\n *\n * - Consecutive updates are performed consecutively\n * - The update is performed inside a callback function that is not re-created during render.\n *\n * If the state value is an object, to update it you must pass the whole object back: this hook will\n * not do a merge of the partial value and the old value. If you prefer this to happen, you should\n * apply the `useReducer` approach instead.\n *\n * @example\n * ```javascript\n * function Counter(){\n *   const [counter, setCounter] = useState(0);\n *   const inc = () => setCounter(counter+1);\n *   return html`<button \\@click=${inc}>${counter}</button>`;\n * }\n * ```\n *\n * @param defaultValue The starter value.\n * @returns The current StateHook value.\n */\nexport const useState = <S>(initialState: S | (() => S)) => {\n\tconst [component, hookIndex] = useHook();\n\tif (!component) {\n\t\t// Server context\n\t\tif (typeof initialState === 'function')\n\t\t\treturn [(initialState as () => S)(), () => {}] as StateHook<S>;\n\t\treturn [initialState, () => {}] as StateHook<S>;\n\t}\n\tif (!component.hooks.hasOwnProperty(hookIndex)) {\n\t\tconst index = hookIndex;\n\t\tcomponent.hooks[index] = [\n\t\t\ttypeof initialState === 'function' ? (initialState as () => S)() : initialState,\n\t\t\t(newValue: S) => {\n\t\t\t\tlet computedValue = newValue;\n\t\t\t\tconst stateHook = component.hooks[index] as StateHook<S>;\n\t\t\t\tif (typeof newValue === 'function') {\n\t\t\t\t\tcomputedValue = newValue(stateHook[0]);\n\t\t\t\t}\n\t\t\t\tif (computedValue !== stateHook[0]) {\n\t\t\t\t\tstateHook[0] = computedValue;\n\t\t\t\t\tcomponent.requestRender();\n\t\t\t\t}\n\t\t\t},\n\t\t];\n\t}\n\tconst state = component.hooks[hookIndex] as StateHook<S>;\n\treturn state;\n};\n\n/**\n * The useEffect hook allows to execute a callback (passed in the first argument) on first render\n * and whenever one of the dependencies changes (second argument). This is useful to execute async\n * calls, set intervals, and other types of initialization in the component.\n * The list of dependencies can be an empty array: in this case, the callback function will only be\n * executed once, that is after the first render.\n * The callback gets executed asynchronously, meaning that it'll be executed once the component will\n * finish its rendering phase.\n *\n * @example\n * ```javascript\n * function Timer(){\n *   const [time, setTime] = useState(0);\n *   useEffect(() => {\n *     setInterval(() => {\n *       setTime((oldTime) => oldTime + 1);\n *     }, 10)\n *   }, [])\n *   return html`Time: ${(time/100).toFixed(2)}s`\n * }\n * ```\n * @param callback The callback to execute when a dependency changes.\n * @param dependencies The list of dependencies to listen to changes.\n */\nexport const useEffect = (\n\tcallback: VoidFunction | (() => VoidFunction),\n\tdependencies: any[] = null\n) => {\n\tconst [component, hookIndex] = useHook();\n\tif (!component.hooks.hasOwnProperty(hookIndex)) {\n\t\tconst effectHook = {\n\t\t\tdependencies: dependencies,\n\t\t\tcallback: callback,\n\t\t\tcleanupFunction: null,\n\t\t} as EffectHook;\n\t\tcomponent.hooks[hookIndex] = effectHook;\n\t\tPromise.resolve().then(() => {\n\t\t\teffectHook.cleanupFunction = callback();\n\t\t});\n\t} else {\n\t\tconst componentEffect = component.hooks[hookIndex] as EffectHook;\n\t\tif (dependencies !== null) {\n\t\t\tfor (let i = 0; i < dependencies.length; i++) {\n\t\t\t\tconst oldDep = componentEffect.dependencies[i];\n\t\t\t\tif (oldDep !== dependencies[i]) {\n\t\t\t\t\tif (typeof componentEffect.cleanupFunction === 'function')\n\t\t\t\t\t\tcomponentEffect.cleanupFunction();\n\t\t\t\t\tPromise.resolve().then(() => {\n\t\t\t\t\t\tcomponentEffect.cleanupFunction = callback();\n\t\t\t\t\t\tcomponentEffect.dependencies = dependencies;\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tPromise.resolve().then(() => {\n\t\t\t\tcomponentEffect.cleanupFunction = callback();\n\t\t\t\tcomponentEffect.dependencies = dependencies;\n\t\t\t});\n\t\t}\n\t}\n};\n\n/**\n * The useLayoutEffect hook is the same as the main useEffect hook. The only difference stands in\n * the execution order: the useEffect hook gets executed asynchronously, so the component will first\n * render, and then it'll call the callback. The useLayoutEffect hook gets executed synchronously,\n * so `before` the component renders.\n * @param callback The callback to execute\n * @param dependencies The list of dependencies to listen to changes.\n */\nexport const useLayoutEffect = (\n\tcallback: VoidFunction | (() => VoidFunction),\n\tdependencies: any[] = null\n) => {\n\tconst [component, hookIndex] = useHook();\n\tif (!component.hooks.hasOwnProperty(hookIndex)) {\n\t\tconst effectHook = {\n\t\t\tdependencies: dependencies,\n\t\t\tcallback: callback,\n\t\t\tcleanupFunction: null,\n\t\t} as EffectHook;\n\t\tcomponent.hooks[hookIndex] = effectHook;\n\t\tcomponent._$layoutEffects.push(effectHook);\n\t} else {\n\t\tconst effectHook = component.hooks[hookIndex] as EffectHook;\n\t\tif (dependencies !== null) {\n\t\t\tfor (let i = 0; i < dependencies.length; i++) {\n\t\t\t\tconst oldDep = effectHook.dependencies[i];\n\t\t\t\tif (oldDep !== dependencies[i]) {\n\t\t\t\t\tif (typeof effectHook.cleanupFunction === 'function') effectHook.cleanupFunction();\n\t\t\t\t\teffectHook.dependencies = dependencies;\n\t\t\t\t\teffectHook.callback = callback;\n\t\t\t\t\tcomponent._$layoutEffects.push(effectHook);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tcomponent._$layoutEffects.push(effectHook);\n\t\t}\n\t}\n};\n\n/**\n * The useRef hook is very similar to the `useState` hook. The only difference is that the useRef\n * hook will NOT re-render the component, and the value will be accessed through the `.current`\n * property. This is useful if you want to keep a stable value of a variable across all the renders,\n * (without re-initializing the variable and loose it's previous state), but without causing a\n * re-render when the value changes.\n * If the value is passed to a \"ref\" attribute in any node, the .current value will be set to the\n * node having that attribute.\n *\n * @example\n * ```javascript\n * function Component(){\n *   const divRef = useRef();\n *   console.log(divRef.current); // null\n *   useEffect(() => {\n *     console.log(divRef.current); // HTMLDivElement\n *   }, []);\n *   return html`<div ref=${divRef}>I have a reference!</div>`;\n * }\n * ```\n *\n * @param initialValue The initial value.\n * @returns The current value of the reference.\n */\nexport const useRef = <T>(initialValue: T = null) => {\n\tconst [component, hookIndex] = useHook();\n\tif (!component.hooks.hasOwnProperty(hookIndex)) {\n\t\tcomponent.hooks[hookIndex] = {\n\t\t\tcurrent: initialValue,\n\t\t\t__wcRef: true,\n\t\t} as RefHook<T>;\n\t}\n\tconst ref = component.hooks[hookIndex] as RefHook<T>;\n\treturn ref;\n};\n\n/**\n * The useCallback hook is a useful hook that stores the given function and returns the same\n * function in the next renders.\n * Why is it useful? Because in javascript 2 function declarations are considered not equal:\n *\n * ```javascript\n * () => {} === () => {} // false\n *\n * const a = () => {}\n * a === a // true\n * ```\n *\n * So, for example, a useful case in which to use it, is when a callback function is passed through\n * the props of another component: if you don't use the `useCallback` hook, the child component will\n * re-render every time the parent component changes, because the two functions will be considered\n * different.\n * This consideration doesn't apply to events, because events are stored in a simple variable and\n * will not cause an add/removal of event listeners, so it's not computationally expensive: it's\n * more expensive to store the callback and get it back every time.\n *\n * @example\n * ```javascript\n * function Component(){\n *   const callback = useCallback(() => console.log('Hey!'));\n *   return html`<${NestedComponent} hey=${callback} />`\n * }\n * ```\n *\n * @param callbackFn The callback function to save.\n * @returns The stored callback function.\n */\nexport const useCallback = (callbackFn: (...args: any[]) => any, dependencies: any[] = []) => {\n\tconst [component, hookIndex] = useHook();\n\tif (!component.hooks.hasOwnProperty(hookIndex)) {\n\t\tcomponent.hooks[hookIndex] = {\n\t\t\tdependencies: dependencies,\n\t\t\tvalue: callbackFn,\n\t\t} as CallbackHook;\n\t} else {\n\t\tconst callbackHook = component.hooks[hookIndex] as CallbackHook;\n\t\tfor (let i = 0; i < dependencies.length; i++) {\n\t\t\tconst oldDep = callbackHook.dependencies[i];\n\t\t\tif (oldDep !== dependencies[i]) {\n\t\t\t\tcallbackHook.dependencies = dependencies;\n\t\t\t\tcallbackHook.value = callbackFn;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tconst callback = component.hooks[hookIndex] as CallbackHook;\n\treturn callback.value;\n};\n\nconst useIdMemo = () => {\n\tlet counter = 0;\n\treturn () => {\n\t\tconst [component, hookIndex] = useHook();\n\t\tif (!component.hooks.hasOwnProperty(hookIndex)) {\n\t\t\tcomponent.hooks[hookIndex] = `:w${counter}:` as IdHook;\n\t\t\tcounter++;\n\t\t}\n\t\tconst callback = component.hooks[hookIndex];\n\t\treturn callback as IdHook;\n\t};\n};\n/**\n * The useId hook returns a unique id for the component. It's simply a counter that gets updated\n * every time a component instantiates this hook. The id structure will be the following: \":r0:\".\n *\n * Since the purpose of component is their reusability, a component should not have an element with\n * a static Id. That's when this function comes into play. The id can be used also for accessibility\n * purposes.\n *\n * @example\n * ```javascript\n * function Input(){\n *   const id = useId();\n *   return html`\n *     <input id=${id} type=\"checkbox\" />\n *     <label for=${id}>Input</label>\n *   `\n * }\n * ```\n *\n * @returns The useId hook.\n */\nexport const useId = useIdMemo();\n\n/**\n * The useMemo hook is useful when you want to store a computed value which would be expensive to\n * re-compute for every single render. For example, filtering or sorting, an array. It accepts one\n * callback function and will return the result of it. The second parameter contains the\n * dependencies that will cause the re-execution of the callback function when one of them changes.\n *\n * @example\n * ```javascript\n *\n * const users = [...] // thousands of users.\n *\n * function Users(){\n *   const adults = useMemo(() => {\n *     return users.filter(user => user.age >= 18);\n *   }, [users])\n *   return html`<ul>\n *     ${adults.map(user => html`<li>${user.name}</li>`)}\n *   </ul>`\n * }\n * ```\n *\n * @param callbackFn The callback function to execute.\n * @param dependencies The depencies to listen to changes.\n * @returns The last computed result.\n */\nexport const useMemo = (callbackFn: () => any, dependencies: any[]) => {\n\tconst [component, hookIndex] = useHook();\n\tif (!component.hooks.hasOwnProperty(hookIndex)) {\n\t\tcomponent.hooks[hookIndex] = {\n\t\t\tvalue: callbackFn(),\n\t\t\tdependencies: dependencies,\n\t\t} as MemoHook;\n\t} else {\n\t\tconst oldMemo = component.hooks[hookIndex] as MemoHook;\n\t\tfor (let i = 0; i < dependencies.length; i++) {\n\t\t\tconst oldDep = oldMemo.dependencies[i];\n\t\t\tif (oldDep !== dependencies[i]) {\n\t\t\t\toldMemo.dependencies = dependencies;\n\t\t\t\toldMemo.value = callbackFn();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tconst memoizedResult = component.hooks[hookIndex] as MemoHook;\n\treturn memoizedResult.value;\n};\n\n/**\n * The useReducer hook is an alternative approach for `useState`, using the redux-like state\n * management.\n * With this hook, you give as a parameter the initial state and the reducer function. This function\n * must accept 2 parameters: the old state, and the action, which is an object having at least the\n * \"type\" key (which is a string corresponding to the action to execute). The reducer must return\n * the new (partial) state.\n * The useReducer function will then return the current state and the **dispatch** function. This\n * function, unlike the simple set function generated by the `useState` hook, will accept a single\n * parameter which is the action to pass to the reducer function.\n *\n * @example\n * ```javascript\n * const reducer = (oldState, action) => {\n *   switch (action.type) {\n *     case 'ADD_SHEEP':\n *       return { sheeps: oldState.sheeps + 1 };\n *     case 'ADD_COW':\n *       return { cows: oldState.cows + 1 };\n *     default:\n *       throw new Error('Action not supported');\n *   }\n * }\n *\n * const initialState = { sheeps: 10, cows: 5 };\n *\n * function SheepsAndCows(){\n *   const [state, dispatch] = useReducer(initialState, reducer);\n *   const addSheep = () => dispatch({ type: 'ADD_SHEEP' })\n *   const addCow = () => dispatch({ type: 'ADD_COW' })\n *   return html`\n *     <button \\@click=${addSheep}>Sheeps: ${state.sheeps}</button>\n *     <button \\@click=${addCow}>Cows: ${state.cows}</button>\n *   `\n * }\n * ```\n *\n * @param reducer The reducer function.\n * @param initialState The initial state.\n * @returns An array with [state, dispath].\n */\nexport const useReducer = <State>(\n\treducer: (state: State, action: ReducerAction) => Partial<State>,\n\tinitialState: State\n) => {\n\tconst [component, hookIndex] = useHook();\n\tconst index = hookIndex;\n\tif (!component.hooks.hasOwnProperty(index)) {\n\t\tconst dispatch = (action: ReducerAction) => {\n\t\t\tconst currentState = (component.hooks[index] as ReducerHook<State>)[0];\n\t\t\tconst partialState = reducer(currentState, action);\n\t\t\tlet newState: State = partialState as State;\n\t\t\tif (\n\t\t\t\ttypeof currentState === 'object' &&\n\t\t\t\t!Array.isArray(currentState) &&\n\t\t\t\tcurrentState !== null\n\t\t\t) {\n\t\t\t\t// Merge the partial state with the old one if it's an object\n\t\t\t\tnewState = {\n\t\t\t\t\t...currentState,\n\t\t\t\t\t...partialState,\n\t\t\t\t} as State;\n\t\t\t}\n\t\t\t(component.hooks[hookIndex] as ReducerHook<State>)[0] = newState;\n\t\t\tif (newState !== currentState) component.requestRender();\n\t\t};\n\t\tconst reducerHook: ReducerHook<State> = [initialState, dispatch];\n\t\tcomponent.hooks[hookIndex] = reducerHook;\n\t}\n\tconst stateAndReducer = component.hooks[hookIndex] as ReducerHook<State>;\n\treturn stateAndReducer;\n};\n\n/**\n * The useExposed hook allows the component to expose variables and/or methods in the DOM. Sometimes\n * you want to be able to select an element in the DOM and then use one of it's methods to do some\n * kind of operations. Some components are better to have an \"isolated\" state, meaning that it's\n * rendering state should be internal, and not depending to its props. A nice example it's a modal:\n * you'd rather want to have an `open()` method that having an `open` property, that causes a\n * re-render of the parent and the modal component.\n *\n * This is a different approach compared to React, but using exposed methods in custom elements can\n * have great benefits speaking about performances in comparison of using props to manage the state.\n *\n * This hook accepts an object having as keys the name of the property to expose and the\n * corresponding values.\n * The `useExposed` hook is a great combination with the `useRef` hook.\n *\n * @example\n * ```javascript\n * function Modal(){\n *   const [open, setOpen] = useState(false);\n *   const openModal = () => setOpen(true);\n *   const closeModal = () => setOpen(false);\n *   useExposed({\n *     open: openModal,\n *     close: closeModal,\n *   });\n *   return html`...`;\n * }\n *\n * function ParentComponent(){\n *   const modalRef = useRef();\n *   /// Will only re-render the modal component, and not this component.\n *   const openModal = () => modalRef.current.open();\n *   return html`\n *     <button \\@click=${openModal}>Open Modal</button>\n *     <${Modal} ref=${modalRef} />\n *   `\n * }\n * ```\n *\n * @param toExpose The keys to expose.\n */\nexport const useExposed = <E = {}>(toExpose: E) => {\n\t// No need to use useHook and increase the hook index\n\tconst component = currentRenderingComponent;\n\tconst keys = Object.keys(toExpose) as (keyof E)[];\n\tfor (const key of keys) {\n\t\t(component as any)[key] = toExpose[key];\n\t}\n};\n\n/**\n * Executes the callback function in the useAsync hook.\n * @param hook The hook data.\n * @param suspense The (maybe) parent suspense.\n * @param callback The callback function that returns the promise.\n */\nconst executeUseAsyncCallback = <S>(\n\thook: [WompoElement, number],\n\tsuspense: SuspenseInstance,\n\tcallback: () => Promise<S>\n) => {\n\tconst [component, hookIndex] = hook;\n\tif (suspense) {\n\t\tsuspense.addSuspense(component);\n\t}\n\t(component.hooks[hookIndex] as AsyncHook<S>).value = null;\n\tconst promise = callback();\n\tpromise\n\t\t.then((data) => {\n\t\t\tcomponent.requestRender();\n\t\t\tsuspense?.removeSuspense(component);\n\t\t\t(component.hooks[hookIndex] as AsyncHook<S>).value = data;\n\t\t})\n\t\t.catch((err) => console.error(err));\n};\n\n/**\n * The `useAsync` hook allows to resolve a promise. It accepts a callback and a list of dependencies\n * as parameters. The callback must return a promise and will be executed on first render and\n * whenever one of the dependencies changes.\n * The hook will return `null` if the promise is being resolved, otherwise the result of the\n * promise. The component will be automatically re-rendered once the promise is resolved.\n *\n * It can be used with a parent `Suspanse` instance to show a loading indicator while the promise\n * is being resolved.\n *\n * @example\n * ```javascript\n * const callback = async () => {\n *   return new Promise((resolve) => { setTimeout(() => { resolve('Solved!'); }, 5000); });\n * }\n *\n * function Results() {\n *   const data = useAsync(callback, []);\n *   return html`${data}`;\n * }\n *\n * function App(){\n *   return html`<${Suspanse} fallback=${html`Loading...`}>\n *     <${Results} />\n *   </${Suspanse}>`\n * }\n * ```\n * @param promise The promise to resolve.\n * @returns The result of the promise or null if it's pending or rejected.\n */\nexport const useAsync = <S>(callback: () => Promise<S>, dependencies: any[]): null | S => {\n\tconst [component, hookIndex] = useHook();\n\tconst suspense = findSuspense(component);\n\tif (!component.hooks.hasOwnProperty(hookIndex)) {\n\t\tcomponent.hooks[hookIndex] = {\n\t\t\tdependencies: dependencies,\n\t\t\tvalue: null,\n\t\t} as AsyncHook<S>;\n\t\texecuteUseAsyncCallback([component, hookIndex], suspense, callback);\n\t} else {\n\t\tconst oldAsync = component.hooks[hookIndex] as AsyncHook<S>;\n\t\tlet newCall = false;\n\t\tfor (let i = 0; i < dependencies.length; i++) {\n\t\t\tconst oldDep = oldAsync.dependencies[i];\n\t\t\tif (oldDep !== dependencies[i]) {\n\t\t\t\toldAsync.dependencies = dependencies;\n\t\t\t\tnewCall = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (newCall) {\n\t\t\texecuteUseAsyncCallback([component, hookIndex], suspense, callback);\n\t\t}\n\t}\n\treturn (component.hooks[hookIndex] as AsyncHook<S>).value;\n};\n\n//? NO useDebugValue (because is for react-dev-tools)\n//? NO useDeferredValue\n//? NO useImperativeHandle\n//? NO useInsertionEffect\n//? NO useOptimistic\n\n/* \n================================================\nCONTEXT\n================================================\n*/\n\n/**\n * The Context interface\n */\ninterface Context<S = any> {\n\tProvider: WompoComponent<ContextProviderProps>;\n\tdefault: S;\n\tname: string;\n}\n\nconst createContextMemo = () => {\n\tlet contextIdentifier = 0;\n\treturn <S>(initialValue: S): Context<S> => {\n\t\tconst name = `wompo-context-provider-${contextIdentifier}`;\n\t\tcontextIdentifier++;\n\t\tconst ProviderFunction = defineWompo<ContextProviderProps, ContextProviderExposed>(\n\t\t\t({ children }: ContextProviderProps) => {\n\t\t\t\tconst initialSubscribers = new Set<WompoElement>();\n\t\t\t\tconst subscribers = useRef(initialSubscribers);\n\t\t\t\tuseExposed({ subscribers: subscribers });\n\t\t\t\tsubscribers.current.forEach((el) => el.requestRender());\n\t\t\t\treturn html`${children}`;\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: name,\n\t\t\t\tcssModule: false,\n\t\t\t}\n\t\t);\n\t\tconst Context = {\n\t\t\tname: name,\n\t\t\tProvider: ProviderFunction,\n\t\t\tdefault: initialValue,\n\t\t\tsubscribers: new Set<WompoElement>(),\n\t\t};\n\t\treturn Context;\n\t};\n};\n\n/**\n * The createContext function returns a Context instance that can be used to pass down a property\n * to all its children. This can be quite useful to avoid passing down props infinitely.\n * The function accepts a single parameter, that is the default value that will be used if a\n * component requires a context that does't have a parent providing the requested value.\n *\n * To initialize the component you'll have to put in the DOM the Context.Provider instance, which\n * accepts a single prop: value. This value will then be passed down to the components that use the\n * `useContext` hook.\n *\n * @example\n * ```javascript\n * const ThemeContext = createContext('light');\n *\n * function App(){\n *   const [theme, setTheme] = useState('light');\n *   const toggle = () => {\n *     if(theme === 'light') setTheme('dark');\n *     if(theme === 'dark') setTheme('light');\n *   }\n *   return html`\n *     <button \\@click=${toggle}>Toggle Theme</button>\n *     <${ThemeContext.Provider} value=${theme}>\n *       <${CompWithTheme} />\n *     </${ThemeContext.Provider}>\n *   `;\n * }\n *\n * function CompWithTheme(){\n *   const theme = useContext(ThemeContext);\n *   return html`<p>Current Theme: ${theme}.</p>`;\n * }\n * ```\n */\nexport const createContext = createContextMemo();\n\n/**\n * The useContext hook is used to obtain the current value provided bya a parent Context.Provider\n * element. The context must be created first with the `createContext` function.\n * @param Context The context to use.\n * @returns The value of the context above the element.\n */\nexport const useContext = <S>(Context: Context<S>): S => {\n\tconst [component, hookIndex] = useHook();\n\tcomponent._$usesContext = true;\n\tif (!component.hooks.hasOwnProperty(hookIndex) || component._$hasBeenMoved) {\n\t\tlet parent = component as Node;\n\t\tconst toFind = Context.name.toUpperCase();\n\t\twhile (parent && parent.nodeName !== toFind && parent !== document.body) {\n\t\t\tif (parent instanceof ShadowRoot) parent = parent.host;\n\t\t\telse parent = parent.parentNode;\n\t\t}\n\t\tconst oldParent = (component.hooks[hookIndex] as ContextHook)?.node;\n\t\tif (parent && parent !== document.body) {\n\t\t\t(parent as ContextInstance).subscribers.current.add(component);\n\t\t\tconst oldDisconnect = component.onDisconnected;\n\t\t\tcomponent.onDisconnected = () => {\n\t\t\t\t(parent as ContextInstance).subscribers.current.delete(component);\n\t\t\t\toldDisconnect();\n\t\t\t};\n\t\t} else if (oldParent) {\n\t\t\tif (DEV_MODE) {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t`The element ${component.tagName} doens't have access to the Context ${Context.name} ` +\n\t\t\t\t\t\t'because is no longer a child of it.'\n\t\t\t\t);\n\t\t\t}\n\t\t\toldParent.subscribers.current.delete(component);\n\t\t} else if (DEV_MODE && component.isConnected) {\n\t\t\tconsole.warn(\n\t\t\t\t`The element ${component.tagName} doens't have access to the Context ${Context.name}. ` +\n\t\t\t\t\t'The default value will be returned instead.'\n\t\t\t);\n\t\t}\n\t\tcomponent.hooks[hookIndex] = {\n\t\t\tnode: parent,\n\t\t} as ContextHook;\n\t}\n\tconst contextNode = (component.hooks[hookIndex] as ContextHook).node;\n\treturn contextNode ? contextNode.props.value : Context.default;\n};\n\n/* \n================================================\nHTML\n================================================\n*/\n\n/**\n * This template function is used to then generate the DOM structure for a component.\n * Should be used as a return value for every component, and for every string value that contains\n * an HTML structure. Simple strings will be taken as they are, and will not be converted into HTML\n * nodes.\n *\n * @example\n * ```javascript\n * const greeting = 'Hello, world!';\n * const template = html`<div>${greeting}</div>`\n * ```\n * @param template The list of static strings of the template\n * @param values The list of dynamic values of the template\n */\nexport function html(templateParts: TemplateStringsArray, ...values: any[]): RenderHtml {\n\tconst cleanValues = [];\n\tconst length = templateParts.length - 1; // skip last element\n\tif (!IS_SERVER) {\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\t// Don't include dynamic closing tags\n\t\t\tif (!templateParts[i].endsWith('</')) cleanValues.push(values[i]);\n\t\t}\n\t} else {\n\t\tcleanValues.push(...values);\n\t}\n\treturn {\n\t\tparts: templateParts,\n\t\tvalues: cleanValues,\n\t\t_$wompoHtml: true,\n\t};\n}\n\n/* \n================================================\nDEFAULT OPTIONS\n================================================\n*/\n/**\n * The default options used when creating a Web Component. If you customize these options, you\n * should do it at the TOP of your html file, before every other component renders.\n * The current options are:\n * - `shadow`: false (boolean)\n * - `cssModule`: true (boolean)\n */\nexport const wompoDefaultOptions: WompoComponentOptions = {\n\tshadow: false,\n\tname: '',\n\tcssModule: true,\n};\n\n/* \n================================================\nDEFINE WOMPO COMPONENT\n================================================\n*/\nexport const registeredComponents: { [key: string]: WompoComponent } = {};\n/**\n * The defineWompo function will be the trigger point to generate your custom web component.\n * It accepts 2 parameter: your functional component and the options to customize it.\n * The current available options are the followings:\n * - `name` (string)\n * - `shadow` (boolean).\n * - `cssModule` (boolean)\n *\n * The default values will depend on the [wompoDefaultOptions] variable.\n *\n * The functional component can have the css property, wich is a string corresponding to its styles.\n *\n * The `name` of the component will be the one specified in the options, or, if not specified, will\n * be the hyphen-cased name of the functional component. If the generated name will not have at\n * least one hyphen, a \"-wompo\" string will be appended in the end.\n * Example: function CounterComponent(){} -> counter-component\n * Example2: function Counter(){} -> counter-wompo\n *\n * The `shadow` option, if true, will build the content of the component in a Shadow DOM.\n *\n * The `cssModule` option will transform the css of the component by replacing the classes with\n * unique names, that will then be passed in the `styles` props of the component.\n *\n * @example\n * ```javascript\n * function Greetings(){\n *   return html`<p>Hello World!</p>`\n * }\n * Greetings.css = `p { color: blue; }`\n *\n * export default defineWompo(Greetings, {\n *   name: 'greetings-component',\n *   shadow: true,\n * })\n * ```\n *\n * @param component The functional component.\n * @param options The options of the component.\n * @returns The generated class for the component.\n */\nexport function defineWompo<Props extends WompoProps, E = {}>(\n\tComponent: WompoComponent<Props & WompoProps>,\n\toptions?: WompoComponentOptions\n) {\n\tif (!Component.css) Component.css = '';\n\tconst componentOptions = {\n\t\t...wompoDefaultOptions,\n\t\t...(options || {}),\n\t};\n\tif (!componentOptions.name) {\n\t\tlet newName = Component.name\n\t\t\t.replace(/.[A-Z]/g, (letter) => `${letter[0]}-${letter[1].toLowerCase()}`)\n\t\t\t.toLowerCase();\n\t\tif (!newName.includes('-')) newName += '-wompo';\n\t\tcomponentOptions.name = newName;\n\t}\n\tComponent.componentName = componentOptions.name;\n\tComponent._$wompoF = true;\n\tconst [generatedCSS, styles] = __generateSpecifcStyles(Component, componentOptions);\n\tComponent.css = generatedCSS;\n\tComponent.options = {\n\t\tgeneratedCSS: generatedCSS,\n\t\tstyles: styles,\n\t\tshadow: componentOptions.shadow,\n\t};\n\tif (!IS_SERVER) {\n\t\tconst ComponentClass = _$wompo<Props, E>(Component, componentOptions);\n\t\tComponent.class = ComponentClass;\n\t\tcustomElements.define(componentOptions.name, ComponentClass);\n\t}\n\tregisteredComponents[componentOptions.name] = Component;\n\treturn Component as WompoComponent<Props & WompoProps>;\n}\n\n/* \n================================================\nMETHODS\n================================================\n*/\n\nexport type LazyCallbackResult = Promise<{ default: WompoComponent }>;\nexport type LazyResult = {\n\t(): Promise<WompoComponent<WompoProps>>;\n\t_$wompoLazy: boolean;\n};\n\n/**\n * The lazy function allows to asynchronously import a component. The load function will be executed\n * only when the component is used, and the result will be cached so that for the next times it'll\n * always return the loaded component. The lazy component can then be combined with the `Suspense`\n * component to render a loading interface while the lazy component is loading.\n *\n * @example\n * ```javascript\n * const DynamicallyLoadedComponent = lazy(() => import('./super-big-component.js'));\n *\n * function App(){\n *   return html`\n *     <${Suspense} fallback=${html`<i>Loading...</i>`}>\n *       <${DynamicallyLoadedComponent} />\n *     </${Suspense}>\n *   `\n * }\n * ```\n * @param load The callback that loads the component\n * @returns A LazyComponent or the loaded compnent\n */\nexport const lazy = (load: () => LazyCallbackResult): LazyResult => {\n\tlet loaded: WompoComponent = null;\n\tasync function LazyComponent() {\n\t\tif (!loaded) {\n\t\t\ttry {\n\t\t\t\tconst importedModule = await load();\n\t\t\t\tloaded = importedModule.default;\n\t\t\t\treturn loaded;\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t\treturn WompoError;\n\t\t\t}\n\t\t}\n\t\treturn loaded;\n\t}\n\tLazyComponent._$wompoLazy = true;\n\treturn LazyComponent;\n};\n\ninterface SuspenseProps extends WompoProps {\n\tfallback: RenderHtml;\n}\ninterface SuspenseInstance extends WompoElement {\n\tloadingComponents: Set<Node>;\n\t/**\n\t * Adds a node to the Suspense instance, and re-render.\n\t * @param node The node that is suspended.\n\t */\n\taddSuspense: (node: Node) => void;\n\t/**\n\t * Remove a node from the Suspense instance. If the node is a new Node (e.g. a dynamic Tag),\n\t * you should also add the second parameter (the new node).\n\t * @param node The node that is suspended.\n\t * @param newNode The new node to replace the old one with.\n\t */\n\tremoveSuspense: (node: Node, newNode?: Node) => void;\n}\n\n/**\n * Finds the closest Suspanse parent node and returns it. If the [startNode] has not parent Suspanse\n * instances, it'll return null.\n * @param startNode The node (possibly a chil of a Suspanse instance).\n * @returns The Found Suspanse instance or null.\n */\nconst findSuspense = (startNode: Node): SuspenseInstance | null => {\n\tlet suspense = startNode;\n\twhile (\n\t\tsuspense &&\n\t\tsuspense.nodeName !== (Suspense as WompoComponent).componentName.toUpperCase()\n\t) {\n\t\tif (suspense.parentNode === null && (suspense as ShadowRoot).host)\n\t\t\tsuspense = (suspense as ShadowRoot).host;\n\t\telse suspense = suspense?.parentNode;\n\t}\n\treturn suspense as SuspenseInstance | null;\n};\n\n/* \n================================================\nCOMPONENTS\n================================================\n*/\ninterface WompoErrorProps extends WompoProps {\n\terror: any;\n\telement: WompoElement;\n}\n\nlet WompoError: WompoComponent;\nif (DEV_MODE) {\n\tWompoError = function ({ styles: s, error, element }: WompoErrorProps) {\n\t\tlet content;\n\t\tif (element && error) {\n\t\t\tcontent = html`<div>\n\t\t\t\t<p>An error rised while rendering the element \"${element.nodeName.toLowerCase()}\".</p>\n\t\t\t\t<p>${error.stack.split('\\n').map((row: string) => html`${row}<br />`)}</p>\n\t\t\t</div>`;\n\t\t} else {\n\t\t\tcontent = html`<div>\n\t\t\t\t<p>An error rised while rendering. Check the developer console for more details.</p>\n\t\t\t</div>`;\n\t\t}\n\t\treturn html`${content}`;\n\t} as any;\n\tWompoError.css = `\n\t\t:host {\n\t\t\tdisplay: block;\n\t\t\tpadding: 20px;\n\t\t\tbackground-color: #ffd0cf;\n\t\t\tcolor: #a44040;\n\t\t\tmargin: 20px;\n\t\t\tborder-left: 3px solid #a44040;\n\t\t}\n\t`;\n\tdefineWompo(WompoError, { name: 'wompo-error', shadow: true });\n}\n\n/**\n * The Suspense component is used to render a Loading UI while its children are still being rendered\n * because they are lazy or because one of its children has a deferred value that is being updated.\n *\n * @example\n * ```javascript\n * const DynamicallyLoadedComponent = lazy(() => import('./super-big-component.js'));\n *\n * function App(){\n *   return html`\n *     <${Suspense} fallback=${html`<i>Loading...</i>`}>\n *       <${DynamicallyLoadedComponent} />\n *     </${Suspense}>\n *   `\n * }\n * ```\n * @param props Accepts children and a Fallback component.\n * @returns The Fallback if loading, otherwise the loaded content.\n */\nexport function Suspense({ children, fallback }: SuspenseProps) {\n\tif (!this.loadingComponents) {\n\t\tthis.loadingComponents = useRef(new Set<Node>()).current;\n\t}\n\tthis.addSuspense = (node: Node) => {\n\t\tif (!this.loadingComponents.size) this.requestRender();\n\t\tthis.loadingComponents.add(node);\n\t};\n\tthis.removeSuspense = (node: Node, newNode: Node = null) => {\n\t\tthis.loadingComponents.delete(node);\n\t\tif (newNode) {\n\t\t\tfor (let i = 0; i < children.nodes.length; i++) {\n\t\t\t\tif (children.nodes[i] === node) {\n\t\t\t\t\tchildren.nodes[i] = newNode;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!this.loadingComponents.size) this.requestRender();\n\t};\n\tif (this.loadingComponents.size) return html`${fallback}`;\n\treturn html`${children}`;\n}\ndefineWompo(Suspense, {\n\tname: 'wompo-suspense',\n});\n\n// TODO Add ErrorBoundary component\n// TODO Handle DEV_MODE based on Production or Development environment\n"],
  "mappings": "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",
  "names": ["html", "dynamics", "startNode"]
}
